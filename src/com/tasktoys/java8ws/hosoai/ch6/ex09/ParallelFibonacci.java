package com.tasktoys.java8ws.hosoai.ch6.ex09;

import java.math.BigInteger;
import java.util.Arrays;

/*
 * 10000 :: 33644764876431783266621612005107543310302148460680063906564769974680081442166662368155595513633734025582065332680836159373734790483865268263040892463056431887354544369559827491606602099884183933864652731300088830269235673613135117579297437854413752130520504347701602264758318906527890855154366159582987279682987510631200575428783453215515103870818298969791613127856265033195487140214287532698187962046936097879900350962302291026368131493195275630227837628441540360584402572114334961180023091208287046088923962328835461505776583271252546093591128203925285393434620904245248929403901706233888991085841065183173360437470737908552631764325733993712871937587746897479926305837065742830161637408969178426378624212835258112820516370298089332099905707920064367426202389783111470054074998459250360633560933883831923386783056136435351892133279732908133732642652633989763922723407882928177953580570993691049175470808931841056146322338217465637321248226383092103297701648054726243842374862411453093812206564914032751086643394517512161526545361333111314042436854805106765843493523836959653428071768775328348234345557366719731392746273629108210679280784718035329131176778924659089938635459327894523777674406192240337638674004021330343297496902028328145933418826817683893072003634795623117103101291953169794607632737589253530772552375943788434504067715555779056450443016640119462580972216729758615026968443146952034614932291105970676243268515992834709891284706740862008587135016260312071903172086094081298321581077282076353186624611278245537208532365305775956430072517744315051539600905168603220349163222640885248852433158051534849622434848299380905070483482449327453732624567755879089187190803662058009594743150052402532709746995318770724376825907419939632265984147498193609285223945039707165443156421328157688908058783183404917434556270520223564846495196112460268313970975069382648706613264507665074611512677522748621598642530711298441182622661057163515069260029861704945425047491378115154139941550671256271197133252763631939606902895650288268608362241082050562430701794976171121233066073310059947366875
 */
public class ParallelFibonacci {
	public static void main(String[] args) {
		ParallelFibonacci.calculateFibonacci(10000);
	}
	
	static public void calculateFibonacci(int n){
		BigIntegerMatrix[] fibonacciMatrixArray = new BigIntegerMatrix[n];
		Arrays.parallelSetAll(fibonacciMatrixArray, (i->new BigIntegerMatrix(1,1,1,0)));
		Arrays.parallelPrefix(fibonacciMatrixArray, BigIntegerMatrix::mul);
		
/*		for(int i=0;i<fibonacciMatrixArray.length;i++){
			System.out.println(i+" : "+fibonacciMatrixArray[i].b);
		}*/
		System.out.println(n+" :: "+fibonacciMatrixArray[n-1].b);
	}
}

// Genericsで<T extends Number>でやろうとしたんだけど，Number掛け算使えないのね・・．
class LongMatrix{
	/*
	 * | a b |
	 * | c d |
	 */
	public long a,b,c,d;
	LongMatrix(long a, long b, long c, long d){
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	}
	static LongMatrix mul(LongMatrix m1, LongMatrix m2){
		return new LongMatrix(
				m1.a * m2.a + m1.b*m2.c, m1.a * m2.b + m1.b*m2.d, 
				m1.c * m2.a + m1.d*m2.c, m1.c * m2.b + m1.d*m2.d);
	}
}

class BigIntegerMatrix{
	public BigInteger a;
	public BigInteger b;
	public BigInteger c;
	public BigInteger d;
	BigIntegerMatrix(BigInteger a, BigInteger b, BigInteger c, BigInteger d){
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	}
	BigIntegerMatrix(int a, int b, int c, int d){
		this.a = BigInteger.valueOf(a);
		this.b = BigInteger.valueOf(b);
		this.c = BigInteger.valueOf(c);
		this.d = BigInteger.valueOf(d);
	}
	static BigIntegerMatrix mul(BigIntegerMatrix m1, BigIntegerMatrix m2){
		return new BigIntegerMatrix(
				m1.a.multiply(m2.a).add( m1.b.multiply(m2.c)), m1.a.multiply(m2.b).add(m1.b.multiply(m2.d)), 
				m1.c.multiply(m2.a).add( m1.d.multiply(m2.c)), m1.c.multiply(m2.b).add(m1.d.multiply(m2.d)));
	}
}
